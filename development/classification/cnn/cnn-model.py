# -*- coding: utf-8 -*-
"""melanoma_detection_v1.0

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OcuYmUwkL04oQ4jcltFmjrec6L8sfoU-
"""

import numpy as np
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten
from keras.layers import Conv2D, MaxPooling2D
from keras import backend as K
import keras
from skimage.io import imread
import os

batch_size = 190
num_classes = 2
epochs = 12

# input image dimensions
img_rows, img_cols = 450, 600
mel = [imread(os.path.join('all', 'MEL', x)) for x in os.listdir(os.path.join('all', 'MEL'))]
nev = [imread(os.path.join('all', 'NV', x)) for x in os.listdir(os.path.join('all', 'NV'))]
df = [imread(x) for x in os.listdir(os.path.join('all', 'DF'))]
bkl = [imread(x) for x in os.listdir(os.path.join('all', 'BKL'))]
akiec = [imread(x) for x in os.listdir(os.path.join('all', 'AKIEC'))]
vasc = [imread(x) for x in os.listdir(os.path.join('all', 'VASC'))]
bcc = [imread(x) for x in os.listdir(os.path.join('all', 'BCC'))]

cut_mel = int(len(mel)*0.8)
cut_nev = int(len(nev)*0.8)
cut_df = int(len(df)*0.8)
cut_bkl = int(len(bkl)*0.8)
cut_akiec = int(len(akiec)*0.8)
cut_vasc = int(len(vasc)*0.8)
cut_bcc = int(len(bcc)*0.8)

x_train = np.array(mel[:cut_mel] + nev[:cut_nev] + df[:cut_df] +
                   bkl[:cut_bkl] + akiec[:cut_akiec] + vasc[:cut_vasc] + bcc[:cut_bcc])
x_test = np.array(mel[cut_mel:] + nev[cut_nev:] + df[cut_df:] +
                  bkl[cut_bkl:] + akiec[cut_akiec:] + vasc[cut_vasc:] + bcc[cut_bcc:])

y_train = np.array([1 for x in mel][:cut_mel] + [0 for x in nev][:cut_nev])
y_test = np.array([1 for x in mel][cut_mel:] + [0 for x in nev][cut_nev:])

if K.image_data_format() == 'channels_first':
    x_train = x_train.reshape(x_train.shape[0], 1, img_rows, img_cols)
    x_test = x_test.reshape(x_test.shape[0], 1, img_rows, img_cols)
    input_shape = (1, img_rows, img_cols)
else:
    x_train = x_train.reshape(x_train.shape[0], img_rows, img_cols, 1)
    x_test = x_test.reshape(x_test.shape[0], img_rows, img_cols, 1)
    input_shape = (img_rows, img_cols, 1)

x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
x_train /= 255
x_test /= 255
print('x_train shape:', x_train.shape)
print(x_train.shape[0], 'train samples')
print(x_test.shape[0], 'test samples')

# convert class vectors to binary class matrices
y_train = keras.utils.to_categorical(y_train, num_classes)
y_test = keras.utils.to_categorical(y_test, num_classes)



# tis one
model = Sequential()
model.add(Conv2D(32, kernel_size=(3, 3), activation='relu',
                 input_shape=[450, 600, 3]))
model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dense(2, activation='softmax'))

model.compile(loss=keras.losses.categorical_crossentropy,
              optimizer=keras.optimizers.Adadelta(),
              metrics=['accuracy'])

model.fit(x_train, y_train, epochs=10, verbose=1)


# tis another one
model = Sequential()
model.add(Conv2D(32, kernel_size=(3, 3),
                 activation='relu',
                 input_shape=input_shape))
model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))
model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(num_classes, activation='softmax'))

model.compile(loss=keras.losses.categorical_crossentropy,
              optimizer=keras.optimizers.Adadelta(),
              metrics=['accuracy'])

model.fit(x_train, y_train,
          batch_size=batch_size,
          epochs=epochs,
          verbose=1,
          validation_data=(x_test, y_test))

score = model.evaluate(x_test, y_test, verbose=0)
print('Test loss:', score[0])
print('Test accuracy:', score[1])
